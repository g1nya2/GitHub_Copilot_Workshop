openapi: 3.0.0
info:
  title: Threads-like Application API
  description: FastAPI 백엔드 API for a Threads-like application
  version: 1.0.0

# API 경로 정보
paths:
  # 인증 (Authentication) 관련
  /users/signup:
    post:
      summary: 회원가입
  /users/login:
    post:
      summary: 로그인

  # 게시물 (Posts) 관련
  /posts:
    get:
      summary: 모든 게시물 조회
    post:
      summary: 게시물 작성
  /posts/{post_id}:
    get:
      summary: 특정 게시물 상세 조회
    delete:
      summary: 게시물 삭제
    put:
      summary: 게시물 수정
  /posts/user/{user_id}:
    get:
      summary: 특정 사용자의 게시물 조회

  # 댓글 (Comments) 관련
  /comments/{post_id}:
    get:
      summary: 게시물의 댓글 조회
    post:
      summary: 댓글 작성
  /comments/{post_id}/{comment_id}:
    delete:
      summary: 댓글 삭제
    put:
      summary: 댓글 수정

  # 좋아요 (Likes) 관련
  /likes/{post_id}:
    get:
      summary: 게시물의 좋아요 조회
    post:
      summary: 게시물 좋아요
    delete:
      summary: 게시물 좋아요 취소

  # 팔로우 (Followers) 관련
  /followers:
    post:
      summary: 사용자 팔로우
  /followers/{following_id}:
    delete:
      summary: 사용자 언팔로우

  # 프로필 (Profile) 관련
  /users/me:
    get:
      summary: 내 프로필 조회
  /users/{user_id}:
    get:
      summary: 특정 사용자 프로필 조회
  /users/{user_id}/followers:
    get:
      summary: 특정 사용자의 팔로워 조회
  /users/{user_id}/following:
    get:
      summary: 특정 사용자의 팔로잉 조회

# DB 모델 정보
models:
  User:
    tablename: users
    columns:
      id: Integer, primary_key=True, index=True
      username: String, unique=True, index=True
      hashed_password: String
      profile_image: String, nullable=True
    relationships:
      - posts: relationship("Post", back_populates="owner")
      - comments: relationship("Comment", back_populates="owner")
      - likes: relationship("Like", foreign_keys="Like.user_id", back_populates="user")
      - followers: relationship("Follower", foreign_keys="Follower.following_id", back_populates="following")
      - followings: relationship("Follower", foreign_keys="Follower.follower_id", back_populates="follower")

  Post:
    tablename: posts
    columns:
      id: Integer, primary_key=True, index=True
      content: String
      likes: Integer, default=0
      created_at: DateTime, default=func.now()
      owner_id: Integer, ForeignKey("users.id")
    relationships:
      - owner: relationship("User", back_populates="posts")
      - comments: relationship("Comment", back_populates="post")
      - likes: relationship("Like", back_populates="post")

  Comment:
    tablename: comments
    columns:
      id: Integer, primary_key=True, index=True
      content: String
      created_at: DateTime, default=func.now()
      post_id: Integer, ForeignKey("posts.id")
      owner_id: Integer, ForeignKey("users.id")
    relationships:
      - post: relationship("Post", back_populates="comments")
      - owner: relationship("User", back_populates="comments")

  Like:
    tablename: likes
    columns:
      id: Integer, primary_key=True, index=True
      user_id: Integer, ForeignKey("users.id")
      post_id: Integer, ForeignKey("posts.id")
    relationships:
      - user: relationship("User", foreign_keys=[user_id], back_populates="likes")
      - post: relationship("Post", foreign_keys=[post_id], back_populates="likes")
    constraints:
      - UniqueConstraint('user_id', 'post_id', name='unique_user_post_like')

  Follower:
    tablename: followers
    columns:
      id: Integer, primary_key=True, index=True
      follower_id: Integer, ForeignKey("users.id") # 팔로우하는 사용자
      following_id: Integer, ForeignKey("users.id") # 팔로우 당하는 사용자
    relationships:
      - follower: relationship("User", foreign_keys=[follower_id], back_populates="followings")
      - following: relationship("User", foreign_keys=[following_id], back_populates="followers")
    constraints:
      - UniqueConstraint('follower_id', 'following_id', name='unique_follower_following')
