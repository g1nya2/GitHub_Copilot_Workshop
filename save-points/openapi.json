{
	"openapi": "3.0.1",
	"info": {
		"title": "Threads-like Application API",
		"description": "This is a Threads-like application backend API that allows users to create accounts, post content, follow other users, and interact via comments and likes",
		"version": "1.0.0",
		"contact": {
			"name": "API Support",
			"email": "support@example.com"
		}
	},
	"servers": [
		{
			"url": "https://api.example.com/v1",
			"description": "Production server"
		},
		{
			"url": "https://staging-api.example.com/v1",
			"description": "Staging server"
		}
	],
	"paths": {
		"/auth/signup": {
			"post": {
				"tags": ["Authentication"],
				"summary": "Create a new user account",
				"description": "Register a new user with username and password",
				"operationId": "signup_auth_signup_post",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": { "$ref": "#/components/schemas/UserCreate" }
						}
					},
					"required": true,
					"description": "User credentials required for registration"
				},
				"responses": {
					"201": {
						"description": "User created successfully",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/UserResponse" }
							}
						}
					},
					"400": {
						"description": "Bad Request - Invalid input data",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/ErrorResponse" }
							}
						}
					},
					"409": {
						"description": "Conflict - Username already exists",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/ErrorResponse" }
							}
						}
					},
					"422": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/HTTPValidationError" }
							}
						}
					}
				}
			}
		},
		"/auth/login": {
			"post": {
				"tags": ["Authentication"],
				"summary": "Authenticate a user and get access token",
				"description": "Login with username and password to receive JWT access and refresh tokens",
				"operationId": "login_auth_login_post",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": { "$ref": "#/components/schemas/UserLogin" }
						}
					},
					"required": true,
					"description": "User credentials required for authentication"
				},
				"responses": {
					"200": {
						"description": "Login successful",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/Token" }
							}
						}
					},
					"401": {
						"description": "Unauthorized - Invalid credentials",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/ErrorResponse" }
							}
						}
					},
					"422": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/HTTPValidationError" }
							}
						}
					}
				}
			}
		},
		"/users/me": {
			"get": {
				"tags": ["Users"],
				"summary": "Get authenticated user's information",
				"description": "Retrieve profile information for the currently authenticated user",
				"operationId": "get_my_info_users_me_get",
				"responses": {
					"200": {
						"description": "User information retrieved successfully",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/UserProfile" }
							}
						}
					},
					"401": {
						"description": "Unauthorized - Invalid or expired token",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/ErrorResponse" }
							}
						}
					}
				},
				"security": [{ "BearerAuth": [] }]
			},
			"put": {
				"tags": ["Users"],
				"summary": "Update authenticated user's information",
				"description": "Update profile information for the currently authenticated user",
				"operationId": "update_my_info_users_me_put",
				"requestBody": {
					"content": {
						"multipart/form-data": {
							"schema": { "$ref": "#/components/schemas/UserUpdate" }
						}
					},
					"required": true,
					"description": "User profile data to update"
				},
				"responses": {
					"200": {
						"description": "User information updated successfully",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/UserProfile" }
							}
						}
					},
					"400": {
						"description": "Bad Request - Invalid input data",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/ErrorResponse" }
							}
						}
					},
					"401": {
						"description": "Unauthorized - Invalid or expired token",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/ErrorResponse" }
							}
						}
					},
					"422": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/HTTPValidationError" }
							}
						}
					}
				},
				"security": [{ "BearerAuth": [] }]
			}
		},
		"/users/{userId}": {
			"get": {
				"tags": ["Users"],
				"summary": "Get user profile by ID",
				"description": "Retrieve public profile information for a specific user",
				"operationId": "get_user_profile_users__userId__get",
				"parameters": [
					{
						"name": "userId",
						"in": "path",
						"required": true,
						"description": "ID of the user to retrieve",
						"schema": { "type": "integer", "title": "User ID" }
					}
				],
				"responses": {
					"200": {
						"description": "User profile retrieved successfully",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/UserProfile" }
							}
						}
					},
					"404": {
						"description": "Not Found - User does not exist",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/ErrorResponse" }
							}
						}
					},
					"422": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/HTTPValidationError" }
							}
						}
					}
				},
				"security": [{ "BearerAuth": [] }]
			}
		},
		"/users/{userId}/follow": {
			"post": {
				"tags": ["Users"],
				"summary": "Follow a user",
				"description": "Start following another user",
				"operationId": "follow_user_users__userId__follow_post",
				"security": [{ "BearerAuth": [] }],
				"parameters": [
					{
						"name": "userId",
						"in": "path",
						"required": true,
						"description": "ID of the user to follow",
						"schema": { "type": "integer", "title": "User ID" }
					}
				],
				"responses": {
					"200": {
						"description": "User followed successfully",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/FollowResponse" }
							}
						}
					},
					"400": {
						"description": "Bad Request - Cannot follow yourself or already following",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/ErrorResponse" }
							}
						}
					},
					"404": {
						"description": "Not Found - User to follow does not exist",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/ErrorResponse" }
							}
						}
					},
					"422": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/HTTPValidationError" }
							}
						}
					}
				}
			},
			"delete": {
				"tags": ["Users"],
				"summary": "Unfollow a user",
				"description": "Stop following another user",
				"operationId": "unfollow_user_users__userId__follow_delete",
				"security": [{ "BearerAuth": [] }],
				"parameters": [
					{
						"name": "userId",
						"in": "path",
						"required": true,
						"description": "ID of the user to unfollow",
						"schema": { "type": "integer", "title": "User ID" }
					}
				],
				"responses": {
					"200": {
						"description": "User unfollowed successfully",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/FollowResponse" }
							}
						}
					},
					"400": {
						"description": "Bad Request - Not following this user",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/ErrorResponse" }
							}
						}
					},
					"404": {
						"description": "Not Found - User to unfollow does not exist",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/ErrorResponse" }
							}
						}
					},
					"422": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/HTTPValidationError" }
							}
						}
					}
				}
			}
		},
		"/posts": {
			"get": {
				"tags": ["Posts"],
				"summary": "Get feed posts",
				"description": "Retrieve posts from users the authenticated user is following",
				"operationId": "get_all_posts_posts_get",
				"parameters": [
					{
						"name": "page",
						"in": "query",
						"description": "Page number for pagination (1-indexed)",
						"schema": {
							"type": "integer",
							"default": 1,
							"minimum": 1
						}
					},
					{
						"name": "limit",
						"in": "query",
						"description": "Number of items per page",
						"schema": {
							"type": "integer",
							"default": 10,
							"minimum": 1,
							"maximum": 100
						}
					}
				],
				"responses": {
					"200": {
						"description": "Posts retrieved successfully",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/PostList" }
							}
						}
					},
					"401": {
						"description": "Unauthorized - Invalid or expired token",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/ErrorResponse" }
							}
						}
					}
				},
				"security": [{ "BearerAuth": [] }]
			},
			"post": {
				"tags": ["Posts"],
				"summary": "Create a new post",
				"description": "Add a new post to the authenticated user's profile",
				"operationId": "create_post_posts_post",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": { "$ref": "#/components/schemas/PostCreate" }
						}
					},
					"required": true,
					"description": "Post content to create"
				},
				"responses": {
					"201": {
						"description": "Post created successfully",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/PostDetail" }
							}
						}
					},
					"400": {
						"description": "Bad Request - Invalid input data",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/ErrorResponse" }
							}
						}
					},
					"401": {
						"description": "Unauthorized - Invalid or expired token",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/ErrorResponse" }
							}
						}
					},
					"422": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/HTTPValidationError" }
							}
						}
					}
				},
				"security": [{ "BearerAuth": [] }]
			}
		},
		"/posts/{postId}": {
			"get": {
				"tags": ["Posts"],
				"summary": "Get post details by ID",
				"description": "Retrieve complete information about a specific post",
				"operationId": "get_post_detail_posts__postId__get",
				"parameters": [
					{
						"name": "postId",
						"in": "path",
						"required": true,
						"description": "ID of the post to retrieve",
						"schema": { "type": "integer", "title": "Post ID" }
					}
				],
				"responses": {
					"200": {
						"description": "Post details retrieved successfully",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/PostDetail" }
							}
						}
					},
					"404": {
						"description": "Not Found - Post does not exist",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/ErrorResponse" }
							}
						}
					},
					"422": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/HTTPValidationError" }
							}
						}
					}
				},
				"security": [{ "BearerAuth": [] }]
			},
			"delete": {
				"tags": ["Posts"],
				"summary": "Delete a post",
				"description": "Remove a post created by the authenticated user",
				"operationId": "delete_post_posts__postId__delete",
				"security": [{ "BearerAuth": [] }],
				"parameters": [
					{
						"name": "postId",
						"in": "path",
						"required": true,
						"description": "ID of the post to delete",
						"schema": { "type": "integer", "title": "Post ID" }
					}
				],
				"responses": {
					"200": {
						"description": "Post deleted successfully",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/SuccessResponse" }
							}
						}
					},
					"401": {
						"description": "Unauthorized - Not your post or invalid token",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/ErrorResponse" }
							}
						}
					},
					"404": {
						"description": "Not Found - Post does not exist",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/ErrorResponse" }
							}
						}
					},
					"422": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/HTTPValidationError" }
							}
						}
					}
				}
			},
			"put": {
				"tags": ["Posts"],
				"summary": "Update a post",
				"description": "Modify content of a post created by the authenticated user",
				"operationId": "update_post_posts__postId__put",
				"security": [{ "BearerAuth": [] }],
				"parameters": [
					{
						"name": "postId",
						"in": "path",
						"required": true,
						"description": "ID of the post to update",
						"schema": { "type": "integer", "title": "Post ID" }
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": { "$ref": "#/components/schemas/PostUpdate" }
						}
					},
					"description": "Updated post content"
				},
				"responses": {
					"200": {
						"description": "Post updated successfully",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/PostDetail" }
							}
						}
					},
					"401": {
						"description": "Unauthorized - Not your post or invalid token",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/ErrorResponse" }
							}
						}
					},
					"404": {
						"description": "Not Found - Post does not exist",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/ErrorResponse" }
							}
						}
					},
					"422": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/HTTPValidationError" }
							}
						}
					}
				}
			}
		},
		"/posts/{postId}/like": {
			"post": {
				"tags": ["Posts"],
				"summary": "Like a post",
				"description": "Add the authenticated user's like to a post",
				"operationId": "like_post_posts__postId__like_post",
				"security": [{ "BearerAuth": [] }],
				"parameters": [
					{
						"name": "postId",
						"in": "path",
						"required": true,
						"description": "ID of the post to like",
						"schema": { "type": "integer", "title": "Post ID" }
					}
				],
				"responses": {
					"200": {
						"description": "Post liked successfully",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/LikeResponse" }
							}
						}
					},
					"400": {
						"description": "Bad Request - Already liked this post",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/ErrorResponse" }
							}
						}
					},
					"404": {
						"description": "Not Found - Post does not exist",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/ErrorResponse" }
							}
						}
					},
					"422": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/HTTPValidationError" }
							}
						}
					}
				}
			},
			"delete": {
				"tags": ["Posts"],
				"summary": "Unlike a post",
				"description": "Remove the authenticated user's like from a post",
				"operationId": "unlike_post_posts__postId__like_delete",
				"security": [{ "BearerAuth": [] }],
				"parameters": [
					{
						"name": "postId",
						"in": "path",
						"required": true,
						"description": "ID of the post to unlike",
						"schema": { "type": "integer", "title": "Post ID" }
					}
				],
				"responses": {
					"200": {
						"description": "Post unliked successfully",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/LikeResponse" }
							}
						}
					},
					"400": {
						"description": "Bad Request - Haven't liked this post",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/ErrorResponse" }
							}
						}
					},
					"404": {
						"description": "Not Found - Post does not exist",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/ErrorResponse" }
							}
						}
					},
					"422": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/HTTPValidationError" }
							}
						}
					}
				}
			}
		},
		"/posts/{postId}/comments": {
			"get": {
				"tags": ["Posts"],
				"summary": "Get comments for a post",
				"description": "Retrieve all comments on a specific post",
				"operationId": "get_post_comments_posts__postId__comments_get",
				"parameters": [
					{
						"name": "postId",
						"in": "path",
						"required": true,
						"description": "ID of the post to get comments from",
						"schema": { "type": "integer", "title": "Post ID" }
					},
					{
						"name": "page",
						"in": "query",
						"description": "Page number for pagination (1-indexed)",
						"schema": {
							"type": "integer",
							"default": 1,
							"minimum": 1
						}
					},
					{
						"name": "limit",
						"in": "query",
						"description": "Number of items per page",
						"schema": {
							"type": "integer",
							"default": 10,
							"minimum": 1,
							"maximum": 100
						}
					}
				],
				"responses": {
					"200": {
						"description": "Comments retrieved successfully",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/CommentList" }
							}
						}
					},
					"404": {
						"description": "Not Found - Post does not exist",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/ErrorResponse" }
							}
						}
					},
					"422": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/HTTPValidationError" }
							}
						}
					}
				},
				"security": [{ "BearerAuth": [] }]
			},
			"post": {
				"tags": ["Posts"],
				"summary": "Add a comment to a post",
				"description": "Create a new comment on a specific post",
				"operationId": "create_comment_posts__postId__comments_post",
				"security": [{ "BearerAuth": [] }],
				"parameters": [
					{
						"name": "postId",
						"in": "path",
						"required": true,
						"description": "ID of the post to comment on",
						"schema": { "type": "integer", "title": "Post ID" }
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": { "$ref": "#/components/schemas/CommentCreate" }
						}
					},
					"description": "Comment content to add"
				},
				"responses": {
					"201": {
						"description": "Comment added successfully",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/Comment" }
							}
						}
					},
					"400": {
						"description": "Bad Request - Invalid input data",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/ErrorResponse" }
							}
						}
					},
					"404": {
						"description": "Not Found - Post does not exist",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/ErrorResponse" }
							}
						}
					},
					"422": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/HTTPValidationError" }
							}
						}
					}
				}
			}
		},
		"/comments/{commentId}": {
			"delete": {
				"tags": ["Comments"],
				"summary": "Delete a comment",
				"description": "Remove a comment created by the authenticated user",
				"operationId": "delete_comment_comments__commentId__delete",
				"security": [{ "BearerAuth": [] }],
				"parameters": [
					{
						"name": "commentId",
						"in": "path",
						"required": true,
						"description": "ID of the comment to delete",
						"schema": { "type": "integer", "title": "Comment ID" }
					}
				],
				"responses": {
					"200": {
						"description": "Comment deleted successfully",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/SuccessResponse" }
							}
						}
					},
					"401": {
						"description": "Unauthorized - Not your comment or invalid token",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/ErrorResponse" }
							}
						}
					},
					"404": {
						"description": "Not Found - Comment does not exist",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/ErrorResponse" }
							}
						}
					},
					"422": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/HTTPValidationError" }
							}
						}
					}
				}
			},
			"put": {
				"tags": ["Comments"],
				"summary": "Update a comment",
				"description": "Modify content of a comment created by the authenticated user",
				"operationId": "update_comment_comments__commentId__put",
				"security": [{ "BearerAuth": [] }],
				"parameters": [
					{
						"name": "commentId",
						"in": "path",
						"required": true,
						"description": "ID of the comment to update",
						"schema": { "type": "integer", "title": "Comment ID" }
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": { "$ref": "#/components/schemas/CommentUpdate" }
						}
					},
					"description": "Updated comment content"
				},
				"responses": {
					"200": {
						"description": "Comment updated successfully",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/Comment" }
							}
						}
					},
					"401": {
						"description": "Unauthorized - Not your comment or invalid token",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/ErrorResponse" }
							}
						}
					},
					"404": {
						"description": "Not Found - Comment does not exist",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/ErrorResponse" }
							}
						}
					},
					"422": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/HTTPValidationError" }
							}
						}
					}
				}
			}
		},
		"/profile": {
			"get": {
				"tags": ["Profile"],
				"summary": "Get authenticated user's profile",
				"description": "Retrieve complete profile information for the authenticated user",
				"operationId": "get_profile_profile_get",
				"responses": {
					"200": {
						"description": "Profile retrieved successfully",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/UserProfile" }
							}
						}
					},
					"401": {
						"description": "Unauthorized - Invalid or expired token",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/ErrorResponse" }
							}
						}
					}
				},
				"security": [{ "BearerAuth": [] }]
			}
		},
		"/profile/posts": {
			"get": {
				"tags": ["Profile"],
				"summary": "Get posts by authenticated user",
				"description": "Retrieve all posts created by the authenticated user",
				"operationId": "get_my_posts_profile_posts_get",
				"parameters": [
					{
						"name": "page",
						"in": "query",
						"description": "Page number for pagination (1-indexed)",
						"schema": {
							"type": "integer",
							"default": 1,
							"minimum": 1
						}
					},
					{
						"name": "limit",
						"in": "query",
						"description": "Number of items per page",
						"schema": {
							"type": "integer",
							"default": 10,
							"minimum": 1,
							"maximum": 100
						}
					}
				],
				"responses": {
					"200": {
						"description": "Posts retrieved successfully",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/PostList" }
							}
						}
					},
					"401": {
						"description": "Unauthorized - Invalid or expired token",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/ErrorResponse" }
							}
						}
					}
				},
				"security": [{ "BearerAuth": [] }]
			}
		},
		"/profile/followers": {
			"get": {
				"tags": ["Profile"],
				"summary": "Get authenticated user's followers",
				"description": "Retrieve list of users following the authenticated user",
				"operationId": "get_followers_profile_followers_get",
				"parameters": [
					{
						"name": "page",
						"in": "query",
						"description": "Page number for pagination (1-indexed)",
						"schema": {
							"type": "integer",
							"default": 1,
							"minimum": 1
						}
					},
					{
						"name": "limit",
						"in": "query",
						"description": "Number of items per page",
						"schema": {
							"type": "integer",
							"default": 10,
							"minimum": 1,
							"maximum": 100
						}
					}
				],
				"responses": {
					"200": {
						"description": "Followers retrieved successfully",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/UserList" }
							}
						}
					},
					"401": {
						"description": "Unauthorized - Invalid or expired token",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/ErrorResponse" }
							}
						}
					}
				},
				"security": [{ "BearerAuth": [] }]
			}
		},
		"/profile/following": {
			"get": {
				"tags": ["Profile"],
				"summary": "Get users followed by authenticated user",
				"description": "Retrieve list of users the authenticated user is following",
				"operationId": "get_following_profile_following_get",
				"parameters": [
					{
						"name": "page",
						"in": "query",
						"description": "Page number for pagination (1-indexed)",
						"schema": {
							"type": "integer",
							"default": 1,
							"minimum": 1
						}
					},
					{
						"name": "limit",
						"in": "query",
						"description": "Number of items per page",
						"schema": {
							"type": "integer",
							"default": 10,
							"minimum": 1,
							"maximum": 100
						}
					}
				],
				"responses": {
					"200": {
						"description": "Following list retrieved successfully",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/UserList" }
							}
						}
					},
					"401": {
						"description": "Unauthorized - Invalid or expired token",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/ErrorResponse" }
							}
						}
					}
				},
				"security": [{ "BearerAuth": [] }]
			}
		},
		"/": {
			"get": {
				"tags": ["System"],
				"summary": "API health check endpoint",
				"description": "Check if the API is running properly",
				"operationId": "root__get",
				"responses": {
					"200": {
						"description": "API is operational",
						"content": {
							"application/json": {
								"schema": { "$ref": "#/components/schemas/HealthCheckResponse" }
							}
						}
					}
				}
			}
		}
	},
	"components": {
		"schemas": {
			"UserUpdate": {
				"properties": {
					"username": {
						"type": "string",
						"title": "Username",
						"description": "New username",
						"minLength": 3,
						"maxLength": 30
					},
					"profile_image": {
						"type": "string",
						"format": "binary",
						"title": "Profile Image",
						"description": "User profile picture"
					}
				},
				"type": "object",
				"title": "UserUpdate"
			},
			"CommentCreate": {
				"properties": {
					"content": {
						"type": "string",
						"title": "Content",
						"description": "Text content of the comment",
						"minLength": 1,
						"maxLength": 300
					}
				},
				"type": "object",
				"required": ["content"],
				"title": "CommentCreate"
			},
			"CommentUpdate": {
				"properties": {
					"content": {
						"type": "string",
						"title": "Content",
						"description": "Updated text content of the comment",
						"minLength": 1,
						"maxLength": 300
					}
				},
				"type": "object",
				"required": ["content"],
				"title": "CommentUpdate"
			},
			"HTTPValidationError": {
				"properties": {
					"detail": {
						"items": { "$ref": "#/components/schemas/ValidationError" },
						"type": "array",
						"title": "Detail",
						"description": "List of validation errors"
					}
				},
				"type": "object",
				"title": "HTTPValidationError",
				"description": "Error response for validation failures"
			},
			"PostCreate": {
				"properties": {
					"content": {
						"type": "string",
						"title": "Content",
						"description": "Text content of the post",
						"minLength": 1,
						"maxLength": 500
					}
				},
				"type": "object",
				"required": ["content"],
				"title": "PostCreate"
			},
			"PostUpdate": {
				"properties": {
					"content": {
						"type": "string",
						"title": "Content",
						"description": "Updated text content of the post",
						"minLength": 1,
						"maxLength": 500
					}
				},
				"type": "object",
				"required": ["content"],
				"title": "PostUpdate"
			},
			"Token": {
				"properties": {
					"access_token": {
						"type": "string",
						"title": "Access Token",
						"description": "JWT token for API authentication"
					},
					"refresh_token": {
						"type": "string",
						"title": "Refresh Token",
						"description": "Token for refreshing the access token"
					},
					"token_type": {
						"type": "string",
						"title": "Token Type",
						"description": "Type of token (usually 'bearer')",
						"default": "bearer"
					}
				},
				"type": "object",
				"required": ["access_token", "refresh_token", "token_type"],
				"title": "Token",
				"description": "Authentication token response"
			},
			"UserCreate": {
				"properties": {
					"username": {
						"type": "string",
						"title": "Username",
						"description": "Unique username for the account",
						"minLength": 3,
						"maxLength": 30
					},
					"password": {
						"type": "string",
						"title": "Password",
						"description": "Account password",
						"minLength": 6,
						"maxLength": 100,
						"format": "password"
					}
				},
				"type": "object",
				"required": ["username", "password"],
				"title": "UserCreate",
				"description": "User registration data"
			},
			"UserLogin": {
				"properties": {
					"username": {
						"type": "string",
						"title": "Username",
						"description": "Username for authentication"
					},
					"password": {
						"type": "string",
						"title": "Password",
						"description": "Account password",
						"format": "password"
					}
				},
				"type": "object",
				"required": ["username", "password"],
				"title": "UserLogin",
				"description": "User login credentials"
			},
			"ValidationError": {
				"properties": {
					"loc": {
						"items": { "anyOf": [{ "type": "string" }, { "type": "integer" }] },
						"type": "array",
						"title": "Location",
						"description": "Location of the validation error"
					},
					"msg": {
						"type": "string",
						"title": "Message",
						"description": "Validation error message"
					},
					"type": {
						"type": "string",
						"title": "Error Type",
						"description": "Type of validation error"
					}
				},
				"type": "object",
				"required": ["loc", "msg", "type"],
				"title": "ValidationError",
				"description": "Single validation error details"
			},
			"ErrorResponse": {
				"type": "object",
				"properties": {
					"error": {
						"type": "string",
						"description": "Error message"
					},
					"status_code": {
						"type": "integer",
						"description": "HTTP status code"
					}
				},
				"required": ["error", "status_code"],
				"title": "ErrorResponse",
				"description": "Standard error response format"
			},
			"SuccessResponse": {
				"type": "object",
				"properties": {
					"message": {
						"type": "string",
						"description": "Success message"
					}
				},
				"required": ["message"],
				"title": "SuccessResponse",
				"description": "Standard success response format"
			},
			"UserResponse": {
				"type": "object",
				"properties": {
					"id": {
						"type": "integer",
						"description": "User ID"
					},
					"username": {
						"type": "string",
						"description": "Username"
					},
					"created_at": {
						"type": "string",
						"format": "date-time",
						"description": "Account creation timestamp"
					}
				},
				"required": ["id", "username", "created_at"],
				"title": "UserResponse",
				"description": "Basic user information"
			},
			"UserProfile": {
				"type": "object",
				"properties": {
					"id": {
						"type": "integer",
						"description": "User ID"
					},
					"username": {
						"type": "string",
						"description": "Username"
					},
					"profile_image_url": {
						"type": "string",
						"format": "uri",
						"description": "URL to user's profile image"
					},
					"followers_count": {
						"type": "integer",
						"description": "Number of followers"
					},
					"following_count": {
						"type": "integer",
						"description": "Number of users this user follows"
					},
					"posts_count": {
						"type": "integer",
						"description": "Number of posts"
					},
					"is_following": {
						"type": "boolean",
						"description": "Whether the authenticated user is following this user"
					},
					"created_at": {
						"type": "string",
						"format": "date-time",
						"description": "Account creation timestamp"
					},
					"updated_at": {
						"type": "string",
						"format": "date-time",
						"description": "Last profile update timestamp"
					}
				},
				"required": [
					"id",
					"username",
					"followers_count",
					"following_count",
					"posts_count",
					"created_at"
				],
				"title": "UserProfile",
				"description": "Detailed user profile information"
			},
			"FollowResponse": {
				"type": "object",
				"properties": {
					"user_id": {
						"type": "integer",
						"description": "Target user ID"
					},
					"is_following": {
						"type": "boolean",
						"description": "Whether the authenticated user is following the target user"
					}
				},
				"required": ["user_id", "is_following"],
				"title": "FollowResponse",
				"description": "Follow/unfollow operation result"
			},
			"PostDetail": {
				"type": "object",
				"properties": {
					"id": {
						"type": "integer",
						"description": "Post ID"
					},
					"content": {
						"type": "string",
						"description": "Post content"
					},
					"author": {
						"type": "object",
						"properties": {
							"id": {
								"type": "integer",
								"description": "Author user ID"
							},
							"username": {
								"type": "string",
								"description": "Author username"
							},
							"profile_image_url": {
								"type": "string",
								"format": "uri",
								"description": "URL to author's profile image"
							}
						},
						"required": ["id", "username"],
						"description": "Post author information"
					},
					"likes_count": {
						"type": "integer",
						"description": "Number of likes on this post"
					},
					"comments_count": {
						"type": "integer",
						"description": "Number of comments on this post"
					},
					"is_liked": {
						"type": "boolean",
						"description": "Whether the authenticated user has liked this post"
					},
					"created_at": {
						"type": "string",
						"format": "date-time",
						"description": "Post creation timestamp"
					},
					"updated_at": {
						"type": "string",
						"format": "date-time",
						"description": "Last post update timestamp"
					}
				},
				"required": [
					"id",
					"content",
					"author",
					"likes_count",
					"comments_count",
					"created_at"
				],
				"title": "PostDetail",
				"description": "Detailed post information"
			},
			"PostList": {
				"type": "object",
				"properties": {
					"items": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/PostDetail"
						},
						"description": "List of posts"
					},
					"total": {
						"type": "integer",
						"description": "Total number of posts"
					},
					"page": {
						"type": "integer",
						"description": "Current page number"
					},
					"size": {
						"type": "integer",
						"description": "Number of items per page"
					},
					"pages": {
						"type": "integer",
						"description": "Total number of pages"
					}
				},
				"required": ["items", "total", "page", "size", "pages"],
				"title": "PostList",
				"description": "Paginated list of posts"
			},
			"Comment": {
				"type": "object",
				"properties": {
					"id": {
						"type": "integer",
						"description": "Comment ID"
					},
					"content": {
						"type": "string",
						"description": "Comment content"
					},
					"post_id": {
						"type": "integer",
						"description": "ID of the post this comment belongs to"
					},
					"author": {
						"type": "object",
						"properties": {
							"id": {
								"type": "integer",
								"description": "Author user ID"
							},
							"username": {
								"type": "string",
								"description": "Author username"
							},
							"profile_image_url": {
								"type": "string",
								"format": "uri",
								"description": "URL to author's profile image"
							}
						},
						"required": ["id", "username"],
						"description": "Comment author information"
					},
					"created_at": {
						"type": "string",
						"format": "date-time",
						"description": "Comment creation timestamp"
					},
					"updated_at": {
						"type": "string",
						"format": "date-time",
						"description": "Last comment update timestamp"
					}
				},
				"required": ["id", "content", "post_id", "author", "created_at"],
				"title": "Comment",
				"description": "Comment information"
			},
			"CommentList": {
				"type": "object",
				"properties": {
					"items": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/Comment"
						},
						"description": "List of comments"
					},
					"total": {
						"type": "integer",
						"description": "Total number of comments"
					},
					"page": {
						"type": "integer",
						"description": "Current page number"
					},
					"size": {
						"type": "integer",
						"description": "Number of items per page"
					},
					"pages": {
						"type": "integer",
						"description": "Total number of pages"
					}
				},
				"required": ["items", "total", "page", "size", "pages"],
				"title": "CommentList",
				"description": "Paginated list of comments"
			},
			"LikeResponse": {
				"type": "object",
				"properties": {
					"post_id": {
						"type": "integer",
						"description": "Post ID"
					},
					"is_liked": {
						"type": "boolean",
						"description": "Whether the post is now liked by the user"
					},
					"likes_count": {
						"type": "integer",
						"description": "Updated total number of likes on the post"
					}
				},
				"required": ["post_id", "is_liked", "likes_count"],
				"title": "LikeResponse",
				"description": "Like/unlike operation result"
			},
			"UserList": {
				"type": "object",
				"properties": {
					"items": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/UserProfile"
						},
						"description": "List of user profiles"
					},
					"total": {
						"type": "integer",
						"description": "Total number of users"
					},
					"page": {
						"type": "integer",
						"description": "Current page number"
					},
					"size": {
						"type": "integer",
						"description": "Number of items per page"
					},
					"pages": {
						"type": "integer",
						"description": "Total number of pages"
					}
				},
				"required": ["items", "total", "page", "size", "pages"],
				"title": "UserList",
				"description": "Paginated list of users"
			},
			"HealthCheckResponse": {
				"type": "object",
				"properties": {
					"status": {
						"type": "string",
						"enum": ["ok"],
						"description": "API status"
					},
					"version": {
						"type": "string",
						"description": "API version"
					}
				},
				"required": ["status", "version"],
				"title": "HealthCheckResponse",
				"description": "API health check response"
			}
		},
		"securitySchemes": {
			"BearerAuth": {
				"type": "http",
				"scheme": "bearer",
				"bearerFormat": "JWT",
				"description": "JWT authentication token obtained from the /auth/login endpoint"
			}
		}
	}
}
