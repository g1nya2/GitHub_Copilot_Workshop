openapi: 3.0.0
info:
  title: Threads-like Application API
  description: FastAPI 백엔드 API for a Threads-like application
  version: 1.0.0

servers:
  - url: http://localhost:8000
    description: 개발 서버

tags:
  - name: users
    description: 사용자 계정 관리
  - name: posts
    description: 게시글 관리
  - name: comments
    description: 댓글 관리
  - name: likes
    description: 게시글 좋아요 관리
  - name: followers
    description: 사용자 팔로우 관리

paths:
  /users/signup:
    post:
      tags:
        - users
      summary: 새 사용자 등록(회원가입)
      operationId: create_user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserCreate"
      responses:
        "200":
          description: 성공적으로 사용자 생성됨
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: 이미 등록된 사용자 이름

  /users/login:
    post:
      tags:
        - users
      summary: 로그인 및 액세스 토큰 발급
      operationId: login_for_access_token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserLogin"
      responses:
        "200":
          description: 로그인 성공, 액세스 토큰 발급됨
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Token"
        "401":
          description: 사용자명이나 패스워드가 올바르지 않음

  /users/me:
    get:
      tags:
        - users
      summary: 현재 로그인한 사용자 정보 조회
      operationId: read_user_me
      security:
        - BearerAuth: []
      responses:
        "200":
          description: 현재 로그인한 사용자 정보
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "401":
          description: 인증되지 않음

  /users/{user_id}:
    get:
      tags:
        - users
      summary: 특정 사용자 정보 조회
      operationId: read_user
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: 사용자 정보
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "404":
          description: 사용자를 찾을 수 없음

  /users/{user_id}/followers:
    get:
      tags:
        - users
      summary: 특정 사용자를 팔로우하는 사용자 목록 조회
      operationId: read_user_followers
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: integer
        - name: skip
          in: query
          required: false
          schema:
            type: integer
            default: 0
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            default: 100
      responses:
        "200":
          description: 팔로워 목록
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
        "404":
          description: 사용자를 찾을 수 없음

  /users/{user_id}/following:
    get:
      tags:
        - users
      summary: 특정 사용자가 팔로우하는 사용자 목록 조회
      operationId: read_user_following
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: integer
        - name: skip
          in: query
          required: false
          schema:
            type: integer
            default: 0
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            default: 100
      responses:
        "200":
          description: 팔로잉 목록
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
        "404":
          description: 사용자를 찾을 수 없음

  /posts:
    get:
      tags:
        - posts
      summary: 모든 게시글 조회
      operationId: read_posts
      parameters:
        - name: skip
          in: query
          required: false
          schema:
            type: integer
            default: 0
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            default: 100
      responses:
        "200":
          description: 게시글 목록
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Post"
    post:
      tags:
        - posts
      summary: 새 게시글 작성
      operationId: create_post
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PostCreate"
      responses:
        "200":
          description: 성공적으로 게시글 생성됨
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Post"
        "401":
          description: 인증되지 않음

  /posts/{post_id}:
    get:
      tags:
        - posts
      summary: ID로 특정 게시글 조회
      operationId: read_post
      parameters:
        - name: post_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: 게시글 정보
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Post"
        "404":
          description: 게시글을 찾을 수 없음
    put:
      tags:
        - posts
      summary: 게시글 수정
      operationId: update_post
      security:
        - BearerAuth: []
      parameters:
        - name: post_id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PostUpdate"
      responses:
        "200":
          description: 성공적으로 게시글 수정됨
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Post"
        "401":
          description: 인증되지 않음
        "403":
          description: 이 게시글을 수정할 권한이 없음
        "404":
          description: 게시글을 찾을 수 없음
    delete:
      tags:
        - posts
      summary: 게시글 삭제
      operationId: delete_post
      security:
        - BearerAuth: []
      parameters:
        - name: post_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: 성공적으로 게시글 삭제됨
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        "401":
          description: 인증되지 않음
        "403":
          description: 이 게시글을 삭제할 권한이 없음
        "404":
          description: 게시글을 찾을 수 없음

  /posts/user/{user_id}:
    get:
      tags:
        - posts
      summary: 특정 사용자의 게시글 조회
      operationId: read_user_posts
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: integer
        - name: skip
          in: query
          required: false
          schema:
            type: integer
            default: 0
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            default: 100
      responses:
        "200":
          description: 게시글 목록
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Post"

  /comments/{post_id}:
    get:
      tags:
        - comments
      summary: 게시물의 댓글 조회
      operationId: read_comments_by_post
      parameters:
        - name: post_id
          in: path
          required: true
          schema:
            type: integer
        - name: skip
          in: query
          required: false
          schema:
            type: integer
            default: 0
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            default: 100
      responses:
        "200":
          description: 댓글 목록
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Comment"
        "404":
          description: 게시글을 찾을 수 없음
    post:
      tags:
        - comments
      summary: 댓글 작성
      operationId: create_comment
      security:
        - BearerAuth: []
      parameters:
        - name: post_id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CommentCreate"
      responses:
        "200":
          description: 성공적으로 댓글 생성됨
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Comment"
        "401":
          description: 인증되지 않음
        "404":
          description: 게시글을 찾을 수 없음

  /comments/{post_id}/{comment_id}:
    put:
      tags:
        - comments
      summary: 댓글 수정
      operationId: update_comment
      security:
        - BearerAuth: []
      parameters:
        - name: post_id
          in: path
          required: true
          schema:
            type: integer
        - name: comment_id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CommentUpdate"
      responses:
        "200":
          description: 성공적으로 댓글 수정됨
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Comment"
        "401":
          description: 인증되지 않음
        "403":
          description: 이 댓글을 수정할 권한이 없음
        "404":
          description: 댓글을 찾을 수 없거나 해당 게시물에 속하는 댓글이 아님
    delete:
      tags:
        - comments
      summary: 댓글 삭제
      operationId: delete_comment
      security:
        - BearerAuth: []
      parameters:
        - name: post_id
          in: path
          required: true
          schema:
            type: integer
        - name: comment_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: 성공적으로 댓글 삭제됨
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        "401":
          description: 인증되지 않음
        "403":
          description: 이 댓글을 삭제할 권한이 없음
        "404":
          description: 댓글을 찾을 수 없거나 해당 게시물에 속하는 댓글이 아님

  /likes:
    post:
      tags:
        - likes
      summary: 게시글에 좋아요 추가
      operationId: like_post
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LikeCreate"
      responses:
        "200":
          description: 성공적으로 좋아요 추가됨
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Like"
        "400":
          description: 이미 좋아요한 게시글임
        "401":
          description: 인증되지 않음
        "404":
          description: 게시글을 찾을 수 없음

  /likes/{post_id}:
    delete:
      tags:
        - likes
      summary: 게시글 좋아요 취소
      operationId: unlike_post
      security:
        - BearerAuth: []
      parameters:
        - name: post_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: 성공적으로 좋아요 취소됨
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        "401":
          description: 인증되지 않음
        "404":
          description: 게시글을 찾을 수 없거나 좋아요 기록이 없음

  /followers:
    post:
      tags:
        - followers
      summary: 사용자 팔로우하기
      operationId: follow_user
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FollowerCreate"
      responses:
        "200":
          description: 성공적으로 팔로우됨
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Follower"
        "400":
          description: 자기 자신을 팔로우할 수 없거나 이미 팔로우한 사용자임
        "401":
          description: 인증되지 않음
        "404":
          description: 해당 사용자를 찾을 수 없음

  /followers/{following_id}:
    delete:
      tags:
        - followers
      summary: 팔로우 취소하기
      operationId: unfollow_user
      security:
        - BearerAuth: []
      parameters:
        - name: following_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: 성공적으로 언팔로우됨
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        "401":
          description: 인증되지 않음
        "404":
          description: 팔로우 관계가 없음

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    UserBase:
      type: object
      properties:
        username:
          type: string
      required:
        - username

    UserCreate:
      allOf:
        - $ref: "#/components/schemas/UserBase"
        - type: object
          properties:
            password:
              type: string
          required:
            - password

    UserLogin:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
      required:
        - username
        - password

    User:
      allOf:
        - $ref: "#/components/schemas/UserBase"
        - type: object
          properties:
            id:
              type: integer
            profile_image:
              type: string
              nullable: true

    Token:
      type: object
      properties:
        access_token:
          type: string
        token_type:
          type: string
      required:
        - access_token
        - token_type

    PostBase:
      type: object
      properties:
        content:
          type: string
      required:
        - content

    PostCreate:
      allOf:
        - $ref: "#/components/schemas/PostBase"

    PostUpdate:
      allOf:
        - $ref: "#/components/schemas/PostBase"

    Post:
      allOf:
        - $ref: "#/components/schemas/PostBase"
        - type: object
          properties:
            id:
              type: integer
            likes:
              type: integer
            created_at:
              type: string
              format: date-time
            owner_id:
              type: integer
            owner:
              $ref: "#/components/schemas/User"
              nullable: true

    CommentBase:
      type: object
      properties:
        content:
          type: string
      required:
        - content

    CommentCreate:
      allOf:
        - $ref: "#/components/schemas/CommentBase"

    CommentUpdate:
      allOf:
        - $ref: "#/components/schemas/CommentBase"

    Comment:
      allOf:
        - $ref: "#/components/schemas/CommentBase"
        - type: object
          properties:
            id:
              type: integer
            created_at:
              type: string
              format: date-time
            post_id:
              type: integer
            owner_id:
              type: integer
            owner:
              $ref: "#/components/schemas/User"
              nullable: true

    LikeCreate:
      type: object
      properties:
        post_id:
          type: integer
      required:
        - post_id

    Like:
      type: object
      properties:
        id:
          type: integer
        user_id:
          type: integer
        post_id:
          type: integer
      required:
        - id
        - user_id
        - post_id

    FollowerCreate:
      type: object
      properties:
        following_id:
          type: integer
      required:
        - following_id

    Follower:
      type: object
      properties:
        id:
          type: integer
        follower_id:
          type: integer
        following_id:
          type: integer
      required:
        - id
        - follower_id
        - following_id
